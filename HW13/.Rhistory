load(url("http://www.stat.cmu.edu/~pfreeman/movement.Rdata"))
f <- function(variable,level0="NO",level1="YES") {
n               <- length(variable)
new.variable    <- rep(level0,n)
w               <- which(variable==1)
new.variable[w] <- level1
return(factor(new.variable))
}
predictors$nonviol      <- f(predictors$nonviol)
predictors$sanctions    <- f(predictors$sanctions)
predictors$aid          <- f(predictors$aid)
predictors$support      <- f(predictors$support)
predictors$viol.repress <- f(predictors$viol.repress)
predictors$defect       <- f(predictors$defect)
levels(response)        <- c("FAILURE","SUCCESS")
df           <- cbind(predictors,response)
names(df)[9] <- "label"
rm(id.half,id,predictors.half,predictors,response)
# FILL ME IN WITH CODE
summary(df)
# FILL ME IN WITH CODE
summary(df)
ggplot(data = df, aes = (x=df$duration)) +
geom_histogram(binwidth = 100, fill = "blue", color = "white")
# FILL ME IN WITH CODE
library{ggplot2}
# FILL ME IN WITH CODE
library(ggplot2)
summary(df)
ggplot(data = df, aes = (x=df$duration)) +
geom_histogram(binwidth = 100, fill = "blue", color = "white")
# FILL ME IN WITH CODE
library(ggplot2)
summary(df)
ggplot(data = df, aes = (x=duration)) +
geom_histogram(binwidth = 100, fill = "blue", color = "white")
# FILL ME IN WITH CODE
library(ggplot2)
summary(df)
ggplot(data = df, aes = (x = duration)) +
geom_histogram(fill = "blue", color = "white")
# FILL ME IN WITH CODE
library(ggplot2)
summary(df)
# FILL ME IN WITH CODE
library(ggplot2)
summary(df)
# Create histogram for the 'duration' variable
ggplot(data = df, aes(x = duration)) +
geom_histogram(fill = "blue", color = "white") +
ggtitle("Histogram of Duration (Original)")
# FILL ME IN WITH CODE
library(ggplot2)
summary(df)
# Create histogram for the 'duration' variable
ggplot(data = df, aes(x = duration)) +
geom_histogram(binwidth = 100 , fill = "blue", color = "white") +
ggtitle("Histogram of Duration (Original)")
# FILL ME IN WITH CODE
library(ggplot2)
summary(df)
# Create histogram for the 'duration' variable
ggplot(data = df, aes(x = duration)) +
geom_histogram(fill = "blue", color = "white") +
ggtitle("Histogram of Duration (Original)")
# FILL ME IN WITH CODE
library(ggplot2)
summary(df)
# Create histogram for the 'duration' variable
ggplot(data = df, aes(x = duration)) +
geom_histogram(fill = "blue", color = "white") +
ggtitle("Histogram of Duration (Original)")
#Transforming duration
df$duration = sqrt(df$duration)
#histogram of the transformed variable
ggplot(data = df , aes(x = duration)) +
geom_histogram(fill = "seagreen" , color = "black") +
ggtitle("Histogram of Duration (Transformed)")
# FILL ME IN WITH CODE
library(ggplot2)
summary(df)
# Create histogram for the 'duration' variable
ggplot(data = df, aes(x = democracy)) +
geom_histogram(fill = "blue", color = "white") +
ggtitle("Histogram of Duration (Original)")
#Transforming duration
df$duration = sqrt(df$duration)
#histogram of the transformed variable
ggplot(data = df , aes(x = duration)) +
geom_histogram(fill = "seagreen" , color = "black") +
ggtitle("Histogram of Duration (Transformed)")
# FILL ME IN WITH CODE
library(ggplot2)
summary(df)
# Create histogram for the 'duration' variable
ggplot(data = df, aes(x = duration)) +
geom_histogram(fill = "blue", color = "white") +
ggtitle("Histogram of Duration (Original)")
#Transforming duration
df$duration = sqrt(df$duration)
#histogram of the transformed variable
ggplot(data = df , aes(x = duration)) +
geom_histogram(fill = "seagreen" , color = "black") +
ggtitle("Histogram of Duration (Transformed)")
# FILL ME IN WITH CODE
library(ggplot2)
summary(df)
# Create histogram for the 'duration' variable
ggplot(data = df, aes(x = duration)) +
geom_histogram(fill = "blue", color = "white") +
ggtitle("Histogram of Duration (Original)")
#Transforming duration
df$duration = sqrt(df$duration)
#histogram of the transformed variable
ggplot(data = df , aes(x = duration)) +
geom_histogram(fill = "seagreen" , color = "black") +
ggtitle("Histogram of Duration (Transformed)")
load(url("http://www.stat.cmu.edu/~pfreeman/movement.Rdata"))
f <- function(variable,level0="NO",level1="YES") {
n               <- length(variable)
new.variable    <- rep(level0,n)
w               <- which(variable==1)
new.variable[w] <- level1
return(factor(new.variable))
}
predictors$nonviol      <- f(predictors$nonviol)
predictors$sanctions    <- f(predictors$sanctions)
predictors$aid          <- f(predictors$aid)
predictors$support      <- f(predictors$support)
predictors$viol.repress <- f(predictors$viol.repress)
predictors$defect       <- f(predictors$defect)
levels(response)        <- c("FAILURE","SUCCESS")
df           <- cbind(predictors,response)
names(df)[9] <- "label"
rm(id.half,id,predictors.half,predictors,response)
# FILL ME IN WITH CODE
library(ggplot2)
summary(df)
# Create histogram for the 'duration' variable
ggplot(data = df, aes(x = duration)) +
geom_histogram(fill = "blue", color = "white") +
ggtitle("Histogram of Duration (Original)")
#Transforming duration
df$duration = sqrt(df$duration)
#histogram of the transformed variable
ggplot(data = df , aes(x = duration)) +
geom_histogram(fill = "seagreen" , color = "black") +
ggtitle("Histogram of Duration (Transformed)")
# FILL ME IN WITH CODE
set.seed(100)
s <- sample(length(df$duration) , round(0.7*length(df$duration)))
df.train <- df[s,]
df.test <- df[-s,]
# FILL ME IN WITH CODE
summary(df)
# FILL ME IN WITH CODE
summary(df)
out.log <- glm(df$label ~ . , data = df)
# FILL ME IN WITH CODE
summary(df)
out.log <- glm(df$label ~ . , data = df , family = binomial)
# FILL ME IN WITH CODE
summary(df)
out.log <- glm(df$label ~ . , data = df.train , family = binomial)
# FILL ME IN WITH CODE
summary(df)
out.log <- glm(df$label ~ . , data = df.train)
# FILL ME IN WITH CODE
summary(df.train)
out.log <- glm(df$label ~ . , data = df.train)
# FILL ME IN WITH CODE
set.seed(100)
s <- sample(length(df$label) , round(0.7*length(df$label)))
df.train <- df[s,]
df.test <- df[-s,]
# FILL ME IN WITH CODE
summary(df.train)
out.log <- glm(df$label ~ . , data = df.train)
# FILL ME IN WITH CODE
summary(df.train)
out.log <- glm(df$label ~ . , data = df.train , family = binomial)
load(url("http://www.stat.cmu.edu/~pfreeman/movement.Rdata"))
f <- function(variable,level0="NO",level1="YES") {
n               <- length(variable)
new.variable    <- rep(level0,n)
w               <- which(variable==1)
new.variable[w] <- level1
return(factor(new.variable))
}
predictors$nonviol      <- f(predictors$nonviol)
predictors$sanctions    <- f(predictors$sanctions)
predictors$aid          <- f(predictors$aid)
predictors$support      <- f(predictors$support)
predictors$viol.repress <- f(predictors$viol.repress)
predictors$defect       <- f(predictors$defect)
levels(response)        <- c("FAILURE","SUCCESS")
df           <- cbind(predictors,response)
names(df)[9] <- "label"
rm(id.half,id,predictors.half,predictors,response)
# FILL ME IN WITH CODE
library(ggplot2)
summary(df)
# Create histogram for the 'duration' variable
ggplot(data = df, aes(x = duration)) +
geom_histogram(fill = "blue", color = "white") +
ggtitle("Histogram of Duration (Original)")
#Transforming duration
df$duration = sqrt(df$duration)
#histogram of the transformed variable
ggplot(data = df , aes(x = duration)) +
geom_histogram(fill = "seagreen" , color = "black") +
ggtitle("Histogram of Duration (Transformed)")
# FILL ME IN WITH CODE
set.seed(100)
s <- sample(length(df$label) , round(0.7*length(df$label)))
df.train <- df[s,]
df.test <- df[-s,]
# FILL ME IN WITH CODE
summary(df.train)
out.log <- glm(df$label ~ . , data = df.train , family = binomial)
# FILL ME IN WITH CODE
summary(df.train)
out.log <- glm(label ~ . , data = df.train , family = binomial)
load(url("http://www.stat.cmu.edu/~pfreeman/movement.Rdata"))
f <- function(variable,level0="NO",level1="YES") {
n               <- length(variable)
new.variable    <- rep(level0,n)
w               <- which(variable==1)
new.variable[w] <- level1
return(factor(new.variable))
}
predictors$nonviol      <- f(predictors$nonviol)
predictors$sanctions    <- f(predictors$sanctions)
predictors$aid          <- f(predictors$aid)
predictors$support      <- f(predictors$support)
predictors$viol.repress <- f(predictors$viol.repress)
predictors$defect       <- f(predictors$defect)
levels(response)        <- c("FAILURE","SUCCESS")
df           <- cbind(predictors,response)
names(df)[9] <- "label"
rm(id.half,id,predictors.half,predictors,response)
# FILL ME IN WITH CODE
library(ggplot2)
summary(df)
# Create histogram for the 'duration' variable
ggplot(data = df, aes(x = duration)) +
geom_histogram(fill = "blue", color = "white") +
ggtitle("Histogram of Duration (Original)")
#Transforming duration
df$duration = sqrt(df$duration)
#histogram of the transformed variable
ggplot(data = df , aes(x = duration)) +
geom_histogram(fill = "seagreen" , color = "black") +
ggtitle("Histogram of Duration (Transformed)")
# FILL ME IN WITH CODE
set.seed(100)
s <- sample(length(df$label) , round(0.7*length(df$label)))
df.train <- df[s,]
df.test <- df[-s,]
load(url("http://www.stat.cmu.edu/~pfreeman/movement.Rdata"))
f <- function(variable,level0="NO",level1="YES") {
n               <- length(variable)
new.variable    <- rep(level0,n)
w               <- which(variable==1)
new.variable[w] <- level1
return(factor(new.variable))
}
predictors$nonviol      <- f(predictors$nonviol)
predictors$sanctions    <- f(predictors$sanctions)
predictors$aid          <- f(predictors$aid)
predictors$support      <- f(predictors$support)
predictors$viol.repress <- f(predictors$viol.repress)
predictors$defect       <- f(predictors$defect)
levels(response)        <- c("FAILURE","SUCCESS")
df           <- cbind(predictors,response)
names(df)[9] <- "label"
rm(id.half,id,predictors.half,predictors,response)
# FILL ME IN WITH CODE
library(ggplot2)
summary(df)
# Create histogram for the 'duration' variable
ggplot(data = df, aes(x = duration)) +
geom_histogram(fill = "blue", color = "white") +
ggtitle("Histogram of Duration (Original)")
#Transforming duration
df$duration = sqrt(df$duration)
#histogram of the transformed variable
ggplot(data = df , aes(x = duration)) +
geom_histogram(fill = "seagreen" , color = "black") +
ggtitle("Histogram of Duration (Transformed)")
# FILL ME IN WITH CODE
set.seed(100)
s <- sample(length(df$label) , round(0.7*length(df$label)))
df.train <- df[s,]
df.test <- df[-s,]
# FILL ME IN WITH CODE
summary(df.train)
out.log <- glm(label ~ . , data = df.train , family = binomial)
resp.prob = predict(out.log,newdata=df.train,type="response")
resp.pred = ifelse(resp.prob>0.5,"SUCCESS","FAILURE")
mean(resp.pred!=resp.test) # compressed MCR calculator
# FILL ME IN WITH CODE
summary(df.train)
out.log <- glm(label ~ . , data = df.train , family = binomial)
resp.prob = predict(out.log,newdata=df.train,type="response")
resp.pred = ifelse(resp.prob>0.5,"SUCCESS","FAILURE")
mean(resp.pred!= df.train$label) # compressed MCR calculator
table(Predicted = resp.pred, Actual = df.train$label)
# FILL ME IN WITH CODE
summary(df.train)
# FILL ME IN WITH CODE
summary(df.test)
# FILL ME IN WITH CODE
class_counts <- table(df.test$label)
class_proportions <- prop.table(class_counts)
majority_class <- names(which.max(class_proportions))
null_mcr <- 1 - class_proportions[majority_class]
# FILL ME IN WITH CODE
count_success <- sum(df.test$label == "SUCCESS")
count_failure <- sum(df.test$label == "FAILURE")
total_count <- nrow(df.test)
majority_class <- ifelse(count_failure > count_success, "NO" , "YES")
null_mcr <- 1 - (max(count_failure , count_success) / total_count)
# FILL ME IN WITH CODE
count_success <- sum(df.test$label == "SUCCESS")
count_failure <- sum(df.test$label == "FAILURE")
total_count <- nrow(df.test)
majority_class <- ifelse(count_failure > count_success, "NO" , "YES")
null_mcr <- 1 - (max(count_failure , count_success) / total_count)
print(null_mcr)
# FILL ME IN WITH CODE
summary(df.train)
out.log <- glm(label ~ . , data = df.train , family = binomial)
resp.prob = predict(out.log,newdata=df.train,type="response")
resp.pred = ifelse(resp.prob>0.5,"SUCCESS","FAILURE")
mean(resp.pred!= df.train$label) # compressed MCR calculator
tab <- table(Predicted = resp.pred, Actual = df.train$label)
# FILL ME IN WITH CODE
TP <- tab[2,2]
FP <- tab[2,1]
TN <- tab[1,1]
FN <- tab[1,2]
# Calculating Sensitivity and Specificity
sensitivity <- TP / (TP + FN)
specificity <- TN / (TN + FP)
# FILL ME IN WITH CODE
TP <- tab[2,2]
FP <- tab[2,1]
TN <- tab[1,1]
FN <- tab[1,2]
# Calculating Sensitivity and Specificity
sensitivity <- TP / (TP + FN)
specificity <- TN / (TN + FP)
print(sensitivity)
print(specificity)
# FILL ME IN WITH CODE
ppv <- TP / (TP + FP)
# FILL ME IN WITH CODE
ppv <- TP / (TP + FP)
print(ppv)
# FILL ME IN WITH CODE
# Extract the necessary values from the logistic regression output
null_deviance <- log.out$null.deviance
# FILL ME IN WITH CODE
summary(df.train)
log.out <- glm(label ~ . , data = df.train , family = binomial)
resp.prob = predict(log.out,newdata=df.train,type="response")
resp.pred = ifelse(resp.prob>0.5,"SUCCESS","FAILURE")
mean(resp.pred!= df.train$label) # compressed MCR calculator
tab <- table(Predicted = resp.pred, Actual = df.train$label)
# FILL ME IN WITH CODE
# Extract the necessary values from the logistic regression output
null_deviance <- log.out$null.deviance
residual_deviance <- log.out$deviance
df_null <- log.out$df.null
df_residual <- log.out$df.residual
# Calculate the deviance difference and degrees of freedom difference
dev_diff <- null_deviance - residual_deviance
df_diff <- df_null - df_residual
# Calculate the p-value
p_value <- 1 - pchisq(dev_diff, df_diff)
# Output the p-value
p_value
# FILL ME IN WITH CODE
summary(log.out)
load(url("http://www.stat.cmu.edu/~pfreeman/movement.Rdata"))
f <- function(variable,level0="NO",level1="YES") {
n               <- length(variable)
new.variable    <- rep(level0,n)
w               <- which(variable==1)
new.variable[w] <- level1
return(factor(new.variable))
}
predictors$nonviol      <- f(predictors$nonviol)
predictors$sanctions    <- f(predictors$sanctions)
predictors$aid          <- f(predictors$aid)
predictors$support      <- f(predictors$support)
predictors$viol.repress <- f(predictors$viol.repress)
predictors$defect       <- f(predictors$defect)
levels(response)        <- c("FAILURE","SUCCESS")
df           <- cbind(predictors,response)
names(df)[9] <- "label"
rm(id.half,id,predictors.half,predictors,response)
# FILL ME IN WITH CODE
library(ggplot2)
summary(df)
# Create histogram for the 'duration' variable
ggplot(data = df, aes(x = duration)) +
geom_histogram(fill = "blue", color = "white") +
ggtitle("Histogram of Duration (Original)")
#Transforming duration
df$duration = sqrt(df$duration)
#histogram of the transformed variable
ggplot(data = df , aes(x = duration)) +
geom_histogram(fill = "seagreen" , color = "black") +
ggtitle("Histogram of Duration (Transformed)")
# FILL ME IN WITH CODE
set.seed(100)
s <- sample(length(df$label) , round(0.7*length(df$label)))
df.train <- df[s,]
df.test <- df[-s,]
# FILL ME IN WITH CODE
summary(df.train)
log.out <- glm(label ~ . , data = df.train , family = binomial)
resp.prob = predict(log.out,newdata=df.test,type="response")
resp.pred = ifelse(resp.prob>0.5,"SUCCESS","FAILURE")
mean(resp.pred!= df.train$label) # compressed MCR calculator
tab <- table(Predicted = resp.pred, Actual = df.train$label)
# FILL ME IN WITH CODE
summary(df.train)
log.out <- glm(label ~ . , data = df.train , family = binomial)
resp.prob = predict(log.out,newdata=df.test,type="response")
resp.pred = ifelse(resp.prob>0.5,"SUCCESS","FAILURE")
mean(resp.pred!= df.train$label) # compressed MCR calculator
tab <- table(Predicted = resp.pred, Actual = df.test$label)
# FILL ME IN WITH CODE
summary(df.train)
log.out <- glm(label ~ . , data = df.train , family = binomial)
resp.prob = predict(log.out,newdata=df.test,type="response")
resp.pred = ifelse(resp.prob>0.5,"SUCCESS","FAILURE")
mean(resp.pred!= df.test$label) # compressed MCR calculator
tab <- table(Predicted = resp.pred, Actual = df.test$label)
# FILL ME IN WITH CODE
count_success <- sum(df.test$label == "SUCCESS")
count_failure <- sum(df.test$label == "FAILURE")
total_count <- nrow(df.test)
majority_class <- ifelse(count_failure > count_success, "NO" , "YES")
null_mcr <- 1 - (max(count_failure , count_success) / total_count)
print(null_mcr)
# FILL ME IN WITH CODE
TP <- tab[2,2]
FP <- tab[2,1]
TN <- tab[1,1]
FN <- tab[1,2]
# Calculating Sensitivity and Specificity
sensitivity <- TP / (TP + FN)
specificity <- TN / (TN + FP)
print(sensitivity)
print(specificity)
# FILL ME IN WITH CODE
ppv <- TP / (TP + FP)
print(ppv)
# FILL ME IN WITH CODE
summary(log.out)
# FILL ME IN WITH CODE
# Extract the necessary values from the logistic regression output
null_deviance <- log.out$null.deviance
residual_deviance <- log.out$deviance
df_null <- log.out$df.null
df_residual <- log.out$df.residual
# Calculate the deviance difference and degrees of freedom difference
dev_diff <- null_deviance - residual_deviance
df_diff <- df_null - df_residual
# Calculate the p-value
p_value <- 1 - pchisq(dev_diff, df_diff)
# Output the p-value
p_value
# FILL ME IN WITH CODE
summary(df.train)
log.out <- glm(label ~ . , data = df.train , family = binomial)
resp.prob = predict(log.out,newdata=df.test,type="response")
resp.pred = ifelse(resp.prob>0.5,"SUCCESS","FAILURE")
mean(resp.pred!= df.test$label) # compressed MCR calculator
tab <- table(Predicted = resp.pred, Actual = df.test$label)
print(tab)
# FILL ME IN WITH CODE
TP <- tab[2,2]
FP <- tab[2,1]
TN <- tab[1,1]
FN <- tab[1,2]
# Calculating Sensitivity and Specificity
sensitivity <- TP / (TP + FN)
specificity <- TN / (TN + FP)
print(sensitivity)
print(specificity)
sum <- sensitivity + specificity
print(sum)
